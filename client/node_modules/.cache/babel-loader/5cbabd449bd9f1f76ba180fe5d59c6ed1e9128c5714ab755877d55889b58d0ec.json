{"ast":null,"code":"var _jsxFileName = \"E:\\\\fullStack-\\\\client\\\\src\\\\component\\\\LandingPage.tsx\";\nimport './LandingPage.css';\nimport * as Yup from 'yup';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst LandingPage = () => {\n  const userDatabackend = localStorage.getItem('userData');\n  const userDatamatch = userDatabackend ? JSON.parse(userDatabackend) : null;\n  const Values = {\n    firstName: '',\n    lastName: '',\n    email: '',\n    password: '',\n    phoneNumber: '',\n    role: '',\n    confirmPassword: ''\n  };\n  const validationForm = Yup.object({\n    firstName: Yup.string().required('First Name is required'),\n    lastName: Yup.string().required('Last Name is required'),\n    email: Yup.string().email('Invalid email address').required('Email is required'),\n    phoneNumber: Yup.string().matches(/^[0-9]{10}$/, 'Phone number must be 10 digits').required('Phone number is required'),\n    password: Yup.string().min(6, 'Must be at least 6 characters').required('Password is required'),\n    confirmPassword: Yup.string().oneOf([Yup.ref('password'), undefined], 'Passwords must match').required('Confirm password is required')\n  });\n  const handleFileUpload = () => {\n    // const file = event.target.files?.[0];\n    // if (file) {\n    //   const reader = new FileReader();\n    //   reader.onload = (e) => {\n    //     if (e.target?.result) {\n    //       const imageUrl = e.target.result as string; // Cast to string\n    //       setAvatarImage(imageUrl); // Update state with new image URL\n    //     }\n    //   };\n    //   reader.readAsDataURL(file); // Read the file as a data URL\n    // }\n  };\n  const handleUpdate = () => {};\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"profile-container\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_c = LandingPage;\nexport default LandingPage;\nvar _c;\n$RefreshReg$(_c, \"LandingPage\");","map":{"version":3,"names":["Yup","jsxDEV","_jsxDEV","Fragment","_Fragment","LandingPage","userDatabackend","localStorage","getItem","userDatamatch","JSON","parse","Values","firstName","lastName","email","password","phoneNumber","role","confirmPassword","validationForm","object","string","required","matches","min","oneOf","ref","undefined","handleFileUpload","handleUpdate","children","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["E:/fullStack-/client/src/component/LandingPage.tsx"],"sourcesContent":["import './LandingPage.css';\r\nimport defaultAvatar from '../images/pngtree-man-avatar-image-for-profile-png-image_13001882.png';\r\nimport { ErrorMessage, Field, Form, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\n\r\nconst LandingPage = () => {\r\n\r\n  const userDatabackend = localStorage.getItem('userData');  \r\n  const userDatamatch = userDatabackend ?  JSON.parse(userDatabackend) : null;\r\n\r\n  const Values = {\r\n    firstName: '',\r\n    lastName:'',\r\n    email:'',\r\n    password:'',\r\n    phoneNumber:'',\r\n    role:'',\r\n    confirmPassword:''\r\n  };\r\n\r\n  const validationForm = Yup.object({\r\n    firstName: Yup.string().required('First Name is required'),\r\n    lastName: Yup.string().required('Last Name is required'),\r\n    email: Yup.string().email('Invalid email address').required('Email is required'),\r\n    phoneNumber: Yup.string().matches(/^[0-9]{10}$/, 'Phone number must be 10 digits').required('Phone number is required'),\r\n    password: Yup.string().min(6, 'Must be at least 6 characters').required('Password is required'),\r\n    confirmPassword: Yup.string()\r\n      .oneOf([Yup.ref('password'), undefined], 'Passwords must match')\r\n      .required('Confirm password is required'),\r\n  });\r\n  \r\n  const handleFileUpload = () => {\r\n    // const file = event.target.files?.[0];\r\n    // if (file) {\r\n    //   const reader = new FileReader();\r\n    //   reader.onload = (e) => {\r\n    //     if (e.target?.result) {\r\n    //       const imageUrl = e.target.result as string; // Cast to string\r\n    //       setAvatarImage(imageUrl); // Update state with new image URL\r\n    //     }\r\n    //   };\r\n    //   reader.readAsDataURL(file); // Read the file as a data URL\r\n    // }\r\n  };\r\n  const handleUpdate = ()=>{\r\n    \r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"profile-container\">\r\n        {/* <div className=\"profile-content\">\r\n          <h2 className=\"profile-heading\">My Profile</h2>\r\n          <div className=\"card-container\">\r\n          <div className=\"profile-card\">\r\n            <img src={defaultAvatar} alt=\"Profile\" className=\"avatar\" />\r\n            <span\r\n              className=\"edit-photo-link\"\r\n              onClick={() => document.getElementById('fileInput')?.click()}\r\n              style={{ cursor: 'pointer', color: 'blue' }}\r\n            >\r\n              Edit Photo\r\n            </span>\r\n            <input \r\n              type=\"file\" \r\n              id=\"fileInput\" \r\n              accept=\"image/*\" \r\n              onChange={handleFileUpload} \r\n              style={{ display: 'none' }} // Hide the input\r\n            />\r\n            <div className=\"profile-details\">\r\n            <p>{userDatamatch.firstName || 'First Name'}</p>\r\n            <p>{userDatamatch.lastName || 'Patel'}</p>\r\n            <p>{userDatamatch.department || 'IT'}</p>\r\n            </div>\r\n          </div>\r\n          <div className=\"profile-card\">\r\n          <Formik \r\n            initialValues={Values}\r\n            validationSchema={validationForm}\r\n            onSubmit={handleUpdate}\r\n          >\r\n            {({ resetForm }) => (\r\n              <Form>\r\n              \r\n                  <>\r\n                    <div className=\"form-field\">\r\n                      <label htmlFor=\"firstName\">First Name</label>\r\n                      <Field type=\"text\" id=\"firstName\" name=\"firstName\" className=\"form-control\" />\r\n                      <ErrorMessage name=\"firstName\" component=\"div\" className=\"text-danger txt-error\" />\r\n                    </div>\r\n                    <div className=\"form-field\">\r\n                      <label htmlFor=\"lastName\">Last Name</label>\r\n                      <Field type=\"text\" id=\"lastName\" name=\"lastName\" className=\"form-control\" />\r\n                      <ErrorMessage name=\"lastName\" component=\"div\" className=\"text-danger txt-error\" />\r\n                    </div>\r\n                    <div className=\"form-field\">\r\n                      <label htmlFor=\"phoneNumber\">Phone Number</label>\r\n                      <Field type=\"text\" id=\"phoneNumber\" name=\"phoneNumber\" className=\"form-control\" />\r\n                      <ErrorMessage name=\"phoneNumber\" component=\"div\" className=\"text-danger txt-error\" />\r\n                    </div>\r\n                    <div className=\"form-field\">\r\n                      <label htmlFor=\"email\">Email</label>\r\n                      <Field type=\"email\" id=\"email\" name=\"email\" className=\"form-control\" />\r\n                      <ErrorMessage name=\"email\" component=\"div\" className=\"text-danger txt-error\" />\r\n                    </div>\r\n                    <div className=\"form-field\">\r\n                      <label htmlFor=\"password\">Password</label>\r\n                      <Field type=\"password\" id=\"password\" name=\"password\" className=\"form-control\" />\r\n                      <ErrorMessage name=\"password\" component=\"div\" className=\"text-danger txt-error\" />\r\n                    </div>\r\n                    <div className=\"form-field\">\r\n                      <label htmlFor=\"confirmPassword\">Confirm Password</label>\r\n                      <Field type=\"password\" id=\"confirmPassword\" name=\"confirmPassword\" className=\"form-control\" />\r\n                      <ErrorMessage name=\"confirmPassword\" component=\"div\" className=\"text-danger txt-error\" />\r\n                    </div>\r\n                  </>\r\n                <button type=\"submit\" className=\"button\">Update</button>\r\n              </Form>\r\n            )}\r\n          </Formik>\r\n          </div>\r\n          </div>\r\n        </div> */}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default LandingPage;\r\n"],"mappings":";AAAA,OAAO,mBAAmB;AAG1B,OAAO,KAAKA,GAAG,MAAM,KAAK;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAE3B,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAExB,MAAMC,eAAe,GAAGC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;EACxD,MAAMC,aAAa,GAAGH,eAAe,GAAII,IAAI,CAACC,KAAK,CAACL,eAAe,CAAC,GAAG,IAAI;EAE3E,MAAMM,MAAM,GAAG;IACbC,SAAS,EAAE,EAAE;IACbC,QAAQ,EAAC,EAAE;IACXC,KAAK,EAAC,EAAE;IACRC,QAAQ,EAAC,EAAE;IACXC,WAAW,EAAC,EAAE;IACdC,IAAI,EAAC,EAAE;IACPC,eAAe,EAAC;EAClB,CAAC;EAED,MAAMC,cAAc,GAAGpB,GAAG,CAACqB,MAAM,CAAC;IAChCR,SAAS,EAAEb,GAAG,CAACsB,MAAM,CAAC,CAAC,CAACC,QAAQ,CAAC,wBAAwB,CAAC;IAC1DT,QAAQ,EAAEd,GAAG,CAACsB,MAAM,CAAC,CAAC,CAACC,QAAQ,CAAC,uBAAuB,CAAC;IACxDR,KAAK,EAAEf,GAAG,CAACsB,MAAM,CAAC,CAAC,CAACP,KAAK,CAAC,uBAAuB,CAAC,CAACQ,QAAQ,CAAC,mBAAmB,CAAC;IAChFN,WAAW,EAAEjB,GAAG,CAACsB,MAAM,CAAC,CAAC,CAACE,OAAO,CAAC,aAAa,EAAE,gCAAgC,CAAC,CAACD,QAAQ,CAAC,0BAA0B,CAAC;IACvHP,QAAQ,EAAEhB,GAAG,CAACsB,MAAM,CAAC,CAAC,CAACG,GAAG,CAAC,CAAC,EAAE,+BAA+B,CAAC,CAACF,QAAQ,CAAC,sBAAsB,CAAC;IAC/FJ,eAAe,EAAEnB,GAAG,CAACsB,MAAM,CAAC,CAAC,CAC1BI,KAAK,CAAC,CAAC1B,GAAG,CAAC2B,GAAG,CAAC,UAAU,CAAC,EAAEC,SAAS,CAAC,EAAE,sBAAsB,CAAC,CAC/DL,QAAQ,CAAC,8BAA8B;EAC5C,CAAC,CAAC;EAEF,MAAMM,gBAAgB,GAAGA,CAAA,KAAM;IAC7B;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EAAA,CACD;EACD,MAAMC,YAAY,GAAGA,CAAA,KAAI,CAEzB,CAAC;EAED,oBACE5B,OAAA,CAAAE,SAAA;IAAA2B,QAAA,eACE7B,OAAA;MAAK8B,SAAS,EAAC;IAAmB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OA0E7B;EAAC,gBACN,CAAC;AAEP,CAAC;AAAAC,EAAA,GA1HKhC,WAAW;AA4HjB,eAAeA,WAAW;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}